{"version":3,"sources":["components/Navigation/indexNavigation.js","constants/routes.js","components/Landing/indexLand.js","components/SignUp/indexSignUp.js","components/SignIn/indexSignIn.js","components/PasswordForget/indexPassForget.js","components/Home/indexHome.js","components/Account/indexAccount.js","components/Admin/indexAdmin.js","components/App/indexApp.js","serviceWorker.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/indexFirebase.js","index.js"],"names":["Navigation","react_default","a","createElement","react_router_dom","to","LandingPage","INITIAL_STATE","username","email","passwordOne","passwordTwo","error","SignUpPage","Component","PasswordForgetPage","HomePage","AccountPage","AdminPage","App","indexNavigation","react_router","exact","path","component","SignInPage","Boolean","window","location","hostname","match","FirebaseContext","React","createContext","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","_this","this","Object","classCallCheck","doCreateUserWithEmailAndPassword","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","app","initializeApp","ReactDOM","render","context","Provider","value","indexApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a9074a0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\nconst Navigation = () => (\r\n    <div>\r\n        <ul>\r\n            <li>\r\n                <Link to = {ROUTES.SIGN_IN}>Sign In</Link>\r\n            </li>\r\n            <li>\r\n                <Link to = {ROUTES.LANDING}>Landing</Link>\r\n            </li>\r\n            <li>\r\n                <Link to = {ROUTES.HOME}>Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to = {ROUTES.ACCOUNT}>Account</Link>\r\n            </li>\r\n            <li>\r\n                <Link to = {ROUTES.ADMIN}>Admin</Link>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default Navigation;\r\n","export const LANDING = '/';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\nexport const HOME = '/home';\r\nexport const ACCOUNT = '/account';\r\nexport const ADMIN = '/admin';\r\nexport const PASSWORD_FORGET = '/pw-forget';\r\n","import React from 'react';\r\n\r\nconst LandingPage = () => (\r\n  <div>\r\n    <h1>LandingPage</h1>\r\n  </div>\r\n);\r\n\r\nexport default LandingPage;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\nconst SignUpPage = () => (\r\n  <div>\r\n    <h1>SignUpPage</h1>\r\n  </div>\r\n);\r\n\r\n//Inicializamos el estado con un object destructuring (destructuracion de objeto),\r\n//De esta manera podemos utilizar el estado inicial despues de un registro exitoso.\r\nconst INITIAL_STATE = {\r\n  username: '',\r\n  email: '',\r\n  passwordOne: '',\r\n  passwordTwo: '',\r\n  error: null,\r\n  };\r\n\r\nclass SignUpForm extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {...INITIAL_STATE};\r\n    }\r\n\r\n  onSubmit = event => {\r\n\r\n  }\r\n\r\n  onChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      username,\r\n      email,\r\n      passwordOne,\r\n      passwordTwo,\r\n      error,\r\n    } = this.state;\r\n    \r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst SignUpLink = () => (\r\n  <p>\r\n    Â¿No tienes cuenta? <Link to={ROUTES.SIGN_UP}>Registrate</Link>\r\n  </p>\r\n);\r\n\r\nexport default SignUpPage;\r\n\r\nexport { SignUpForm, SignUpLink };","import React from 'react';\r\n\r\nconst SignUpPage = () => (\r\n  <div>\r\n    <h1>SignUpPage</h1>\r\n  </div>\r\n);\r\n\r\nexport default SignUpPage;","import React from 'react';\r\n\r\nconst PasswordForgetPage = () => (\r\n  <div>\r\n    <h1>PasswordForgetPage</h1>\r\n  </div>\r\n);\r\n\r\nexport default PasswordForgetPage;","import React from 'react';\r\n\r\nconst HomePage = () => (\r\n  <div>\r\n    <h1>HomePage</h1>\r\n  </div>\r\n);\r\n\r\nexport default HomePage;","import React from 'react';\r\n\r\nconst AccountPage = () => (\r\n  <div>\r\n    <h1>AccountPage</h1>\r\n  </div>\r\n);\r\n\r\nexport default AccountPage;","import React from 'react';\r\n\r\nconst AdminPage = () => (\r\n  <div>\r\n    <h1>AdminPage</h1>\r\n  </div>\r\n);\r\n\r\nexport default AdminPage;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, } from 'react-router-dom';\r\nimport Navigation from '../Navigation/indexNavigation';\r\nimport LandingPage from '../Landing/indexLand';\r\nimport SignUpPage from '../SignUp/indexSignUp';\r\nimport SignInPage from '../SignIn/indexSignIn';\r\nimport PasswordForgetPage from '../PasswordForget/indexPassForget';\r\nimport HomePage from '../Home/indexHome';\r\nimport AccountPage from '../Account/indexAccount';\r\nimport AdminPage from '../Admin/indexAdmin';\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\nconst App = () => (\r\n    <Router>\r\n        <div>\r\n            <Navigation />\r\n\r\n            <hr />\r\n\r\n            <Route exact path={ROUTES.LANDING} component={LandingPage} />\r\n            <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\r\n            <Route path={ROUTES.SIGN_IN} component={SignInPage} />\r\n            <Route path={ROUTES.PASSWORD_FORGET} component={PasswordForgetPage} />\r\n            <Route path={ROUTES.HOME} component={HomePage} />\r\n            <Route path={ROUTES.ACCOUNT} component={AccountPage} />\r\n            <Route path={ROUTES.ADMIN} component={AdminPage} />\r\n        </div>\r\n    </Router>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst FirebaseContext = React.createContext(null);\r\n\r\nexport default FirebaseContext;","import app from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET, \r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID \r\n  };\r\n\r\n  class Firebase {\r\n      constructor(){\r\n          app.initializeApp(firebaseConfig);\r\n\r\n          this.auth = app.auth();\r\n      }\r\n\r\n      //**Auth API**\r\n      //Authentication\r\n      doCreateUserWithEmailAndPassword = (email, password) =>\r\n        this.auth.createUserWithEmailAndPassword(email, password);\r\n      \r\n        //SignIn\r\n      doSignInWithEmailAndPassword = (email, password) =>\r\n       this.auth.signInWithEmailAndPassword(email, password);\r\n\r\n       //SignOut\r\n       doSignOut = () => this.auth.signOut();\r\n\r\n       //Reset Password\r\n       doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\r\n\r\n       //Change Password\r\n       doPasswordUpdate = password =>\r\n        this.auth.currentUser.updatePassword(password);\r\n  }\r\n\r\n  export default Firebase;","import FirebaseContext from './context';\r\nimport Firebase from './firebase';\r\n\r\nexport default Firebase;\r\n\r\nexport { FirebaseContext };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/indexApp';\nimport * as serviceWorker from './serviceWorker';\nimport Firebase, { FirebaseContext } from './components/Firebase/indexFirebase';\n\nReactDOM.render(\n    <FirebaseContext.Provider value={new Firebase()}>\n        <App />\n    </FirebaseContext.Provider>,\n    document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}